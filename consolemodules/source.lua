local currentSource = [[
return {librarys = {test = {testing = function(s,k) print(s,k) end}}}
]]
local dhig = {builtin = {}, logenabled = false} local sources = {} local function Log(name, dir)if not(dhig.logenabled)then return end    if (dir == "g") then         dir = "gameLog"     else         dir = "scriptLog"     end     local t = os.date("*t")     local e =         tostring(t.day) ..         "." ..             tostring(t.month) ..                 "." .. tostring(t.year) .. " " .. tostring(t.hour) .. ":" .. tostring(t.min) .. ":" .. tostring(t.sec)     makefolder("DHIG/logging")     if not (iffile("DHIG/logging/" .. dir)) then         writefile("DHIG/logging/" .. dir,"DHIG LOG")     end     appfile("DHIG/logging/" .. dir,"\n" .. e .. " -- " .. name) end
makefolder("DHIG") makefolder("DHIG/modules") writefile("DHIG/modules/test.lua", "return {librarys = {test = {testing = function() print('hello') end}}}") writefile("DHIG/sources.lua", currentSource) sources = loadstring(fileread("DHIG/sources.lua"))() function dhig:import(name, rm, instantimport)     local m = (nil)     for _, i in next, sources do         if (i.tag == name) then             m = (loadstring(i.toreturn)())         end     end     if not (m) then         np("(1): module not found")         return     end     local new = {}     if (instantimport) then         xpcall(             function()                 for i, v in next, m.librarys do                     if not (new[i]) then                         new[i] = {}                     end                     for i2, v2 in next, v do                         new[i][i2] = v2                     end                 end             end,             function()                 return             end         )     else         local functions = {}         xpcall(             function()                 for i, v in next, m.librarys do                     if not (new[i]) then                         new[i] = function(pos, ...)                             if (#functions >= pos) and not (pos <= 0) then                                 functions[pos](...)                             end                         end                     end                     for _, i2 in next, v do                         table.insert(functions, i2)                     end                 end             end,             function()                 return             end         )     end     if (rm) then         return new     else         for _, i in next, dhig do             table.insert(new, i)         end         dhig = new     end end
--// script version
--// prototype of a WIP GUI
